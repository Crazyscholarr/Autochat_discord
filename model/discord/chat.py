import asyncio
import random
import aiohttp
import json
from loguru import logger
from curl_cffi.requests import AsyncSession

from utils.config import Config
from utils.constants import Account
from prompts import REFERENCED_MESSAGES_SYSTEM_PROMPT, BATCH_MESSAGES_SYSTEM_PROMPT

async def get_grok_response(messages: list, config: Config, is_reply: bool = False) -> str:
    with logger.contextualize(index=0):
        for _ in range(5):
            try:
                async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=True)) as session:
                    api_key = random.choice(config.GROK.API_KEYS)
                    headers = {
                        "Authorization": f"Bearer {api_key}",
                        "Content-Type": "application/json",
                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) discord/1.0.9007 Chrome/91.0.4472.164 Electron/13.6.9 Safari/537.36",
                    }
                    system_prompt = REFERENCED_MESSAGES_SYSTEM_PROMPT if is_reply else BATCH_MESSAGES_SYSTEM_PROMPT
                    prompt = f"{system_prompt}\n\nRecent messages: {messages}"
                    payload = {
                        "model": config.GROK.MODEL,
                        "messages": [
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": prompt}
                        ],
                    }
                    async with session.post(
                        "https://api.x.ai/v1/chat/completions",
                        headers=headers,
                        json=payload,
                        proxy=f"http://{config.GROK.PROXY_FOR_GROK}" if config.GROK.PROXY_FOR_GROK else None,
                    ) as response:
                        if response.status == 200:
                            data = await response.json()
                            content = data["choices"][0]["message"]["content"]
                            forbidden_words = [
                                "hi", "hello", "good day", "hey", "gm", "greetings", "howdy", "sup", "yo",
                                "what‚Äôs up", "what‚Äôs good", "wassup", "how are you doing", "how are you",
                                "how‚Äôs it going", "how‚Äôs everything", "how‚Äôs life", "how‚Äôs your day going",
                                "how‚Äôs your day been", "how have you been", "what‚Äôs new with you", "what‚Äôs happening"
                            ]
                            content_words = content.lower().split()
                            if any(word in forbidden_words for word in content_words):
                                logger.warning(f"Ph·∫£n h·ªìi ch·ª©a t·ª´ b·ªã c·∫•m: {content}. Th·ª≠ l·∫°i")
                                continue
                            word_count = len(content_words)
                            if not (3 <= word_count <= 15):
                                logger.warning(f"Ph·∫£n h·ªìi c√≥ {word_count} t·ª´, kh√¥ng h·ª£p l·ªá: {content}. Th·ª≠ l·∫°i")
                                continue
                            return content
                        else:
                            logger.error(f"Kh√¥ng th·ªÉ l·∫•y ph·∫£n h·ªìi t·ª´ Grok: {response.status} - {await response.text()}")
                            return ""
            except Exception as e:
                logger.error(f"L·ªói trong get_grok_response: {e}")
                return ""
        logger.error("Kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi h·ª£p l·ªá sau 5 l·∫ßn th·ª≠")
        return "hmmm ! üòÑ"

async def get_recent_messages(account: Account, config: Config, session: AsyncSession, proxies: list, guild_id: str, channel_id: str, limit: int = 3) -> list:
    with logger.contextualize(index=account.index):
        available_proxies = proxies + [""]
        for proxy in available_proxies:
            try:
                url = f"https://discord.com/api/v9/channels/{channel_id}/messages?limit={limit}"
                headers = {
                    "Authorization": account.token,
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) discord/1.0.9007 Chrome/91.0.4472.164 Electron/13.6.9 Safari/537.36",
                }
                response = await session.get(
                    url, headers=headers, proxy=f"http://{proxy}" if proxy else None
                )
                if response.status_code == 200:
                    messages = response.json()
                    return messages
                else:
                    logger.error(f"Kh√¥ng th·ªÉ l·∫•y tin nh·∫Øn g·∫ßn ƒë√¢y trong channel {channel_id}")
            except Exception as e:
                logger.error(f"L·ªói khi l·∫•y tin nh·∫Øn g·∫ßn ƒë√¢y trong channel {channel_id} : {e}")
        logger.error(f"T·∫•t c·∫£ proxy th·∫•t b·∫°i khi l·∫•y tin nh·∫Øn g·∫ßn ƒë√¢y trong channel {channel_id}")
        return []

async def send_message(account: Account, config: Config, session: AsyncSession, proxies: list, guild_id: str, channel_id: str) -> tuple[bool, str]:
    with logger.contextualize(index=account.index):
        for retry in range(config.SETTINGS.ATTEMPTS):
            try:
                recent_messages = await get_recent_messages(account, config, session, proxies, guild_id, channel_id)
                message_contents = [msg["content"] for msg in recent_messages if msg["content"]]
                if not message_contents:
                    logger.warning(f"Kh√¥ng t√¨m th·∫•y tin nh·∫Øn g·∫ßn ƒë√¢y trong channel {channel_id}, d√πng tin nh·∫Øn m·∫∑c ƒë·ªãnh")
                    response_content = await get_grok_response(["General chat in a Discord channel"], config)
                    if not response_content:
                        response_content = "hmmm ! üòÑ"
                else:
                    response_content = await get_grok_response(message_contents, config)
                    if not response_content:
                        response_content = "hmmm ! üòÑ"

                url = f"https://discord.com/api/v9/channels/{channel_id}/messages"
                headers = {
                    "Authorization": account.token,
                    "Content-Type": "application/json",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) discord/1.0.9007 Chrome/91.0.4472.164 Electron/13.6.9 Safari/537.36",
                }
                proxy = random.choice(proxies + [""]) if proxies else ""
                response = await session.post(
                    url, headers=headers, json={"content": response_content}, proxy=f"http://{proxy}" if proxy else None
                )
                if response.status_code in [200, 204]:
                    message_id = response.json().get("id")
                    logger.success(f"| G·ª≠i tin nh·∫Øn trong channel {channel_id}: {response_content}")
                    return True, message_id
                elif response.status_code == 429:
                    error_data = json.loads(response.text)
                    retry_after = error_data.get("retry_after", 5)
                    logger.warning(f"| B·ªã gi·ªõi h·∫°n t·ªëc ƒë·ªô trong channel {channel_id}, th·ª≠ l·∫°i sau {retry_after}s")
                    await asyncio.sleep(retry_after)
                else:
                    logger.error(f"| Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn trong channel {channel_id}")
            except Exception as e:
                logger.error(f"| L·ªói g·ª≠i tin nh·∫Øn trong channel {channel_id}: {e}")
            await asyncio.sleep(random.randint(*config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS))
        return False, ""

async def reply_message(account: Account, config: Config, session: AsyncSession, proxies: list, guild_id: str, channel_id: str) -> tuple[bool, str]:
    with logger.contextualize(index=account.index):
        for retry in range(config.SETTINGS.ATTEMPTS):
            try:
                recent_messages = await get_recent_messages(account, config, session, proxies, guild_id, channel_id, limit=1)
                if not recent_messages:
                    logger.warning(f"| Kh√¥ng t√¨m th·∫•y tin nh·∫Øn ƒë·ªÉ tr·∫£ l·ªùi trong channel {channel_id}, g·ª≠i tin nh·∫Øn m·ªõi")
                    return await send_message(account, config, session, proxies, guild_id, channel_id)
                
                last_message = recent_messages[0]["content"]
                response_content = await get_grok_response([last_message], config, is_reply=True)
                if not response_content:
                    response_content = "hmmm ! üòÑ"

                url = f"https://discord.com/api/v9/channels/{channel_id}/messages?limit=1"
                headers = {
                    "Authorization": account.token,
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) discord/1.0.9007 Chrome/91.0.4472.164 Electron/13.6.9 Safari/537.36",
                }
                proxy = random.choice(proxies + [""]) if proxies else ""
                response = await session.get(
                    url, headers=headers, proxy=f"http://{proxy}" if proxy else None
                )
                if response.status_code != 200:
                    logger.error(f"| Kh√¥ng th·ªÉ l·∫•y tin nh·∫Øn cu·ªëi trong channel {channel_id}")
                    return False, ""
                
                last_message_data = response.json()[0]
                reply_url = f"https://discord.com/api/v9/channels/{channel_id}/messages"
                payload = {
                    "content": response_content,
                    "message_reference": {
                        "message_id": last_message_data["id"],
                        "channel_id": channel_id,
                        "guild_id": guild_id,
                    },
                }
                response = await session.post(
                    url=reply_url, headers=headers, json=payload, proxy=f"http://{proxy}" if proxy else None
                )
                if response.status_code in [200, 204]:
                    message_id = response.json().get("id")
                    logger.success(f"| Tr·∫£ l·ªùi tin nh·∫Øn trong channel {channel_id}: {response_content}")
                    return True, message_id
                elif response.status_code == 429:
                    error_data = json.loads(response.text)
                    retry_after = error_data.get("retry_after", 5)
                    logger.warning(f"| B·ªã gi·ªõi h·∫°n t·ªëc ƒë·ªô trong channel {channel_id}, th·ª≠ l·∫°i sau {retry_after}s")
                    await asyncio.sleep(retry_after)
                else:
                    logger.error(f"| Kh√¥ng th·ªÉ tr·∫£ l·ªùi tin nh·∫Øn trong channel {channel_id}")
            except Exception as e:
                logger.error(f"| L·ªói tr·∫£ l·ªùi tin nh·∫Øn trong channel {channel_id}: {e}")
            await asyncio.sleep(random.randint(*config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS))
        return False, ""

async def check_and_respond_to_replies(account: Account, config: Config, session: AsyncSession, proxies: list, guild_id: str, channel_id: str, bot_message_id: str) -> bool:
    with logger.contextualize(index=account.index):
        try:
            recent_messages = await get_recent_messages(account, config, session, proxies, guild_id, channel_id, limit=10)
            for message in recent_messages:
                if "message_reference" in message and message["message_reference"].get("message_id") == bot_message_id:
                    reply_content = message["content"]
                    bot_message = None
                    for msg in recent_messages:
                        if msg["id"] == bot_message_id:
                            bot_message = msg["content"]
                            break
                    if not bot_message:
                        logger.warning(f"| Kh√¥ng t√¨m th·∫•y tin nh·∫Øn g·ªëc v·ªõi ID {bot_message_id}")
                        continue
                    
                    logger.info(f" | T√¨m th·∫•y tin nh·∫Øn tr·∫£ l·ªùi:  Bot: {bot_message} | Ng∆∞·ªùi d√πng: {reply_content}")
                    
                    response_content = await get_grok_response([f"Bot: {bot_message}", f"User: {reply_content}"], config, is_reply=True)
                    if not response_content:
                        response_content = "hmmm ! üòÑ"

                    url = f"https://discord.com/api/v9/channels/{channel_id}/messages"
                    headers = {
                        "Authorization": account.token,
                        "Content-Type": "application/json",
                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) discord/1.0.9007 Chrome/91.0.4472.164 Electron/13.6.9 Safari/537.36",
                    }
                    proxy = random.choice(proxies + [""]) if proxies else ""
                    payload = {
                        "content": response_content,
                        "message_reference": {
                            "message_id": message["id"],
                            "channel_id": channel_id,
                            "guild_id": guild_id,
                        },
                    }
                    response = await session.post(
                        url, headers=headers, json=payload, proxy=f"http://{proxy}" if proxy else None
                    )
                    if response.status_code in [200, 204]:
                        logger.success(f"| Tr·∫£ l·ªùi tin nh·∫Øn ng∆∞·ªùi d√πng trong channel {channel_id}: {response_content}")
                        return True
                    elif response.status_code == 429:
                        error_data = json.loads(response.text)
                        retry_after = error_data.get("retry_after", 5)
                        logger.warning(f"| B·ªã gi·ªõi h·∫°n t·ªëc ƒë·ªô trong channel {channel_id}, th·ª≠ l·∫°i sau {retry_after}s")
                        await asyncio.sleep(retry_after)
                    else:
                        logger.error(f"| Kh√¥ng th·ªÉ tr·∫£ l·ªùi tin nh·∫Øn trong channel {channel_id}")
                        return False
            return False
        except Exception as e:
            logger.error(f"| L·ªói khi ki·ªÉm tra v√† tr·∫£ l·ªùi tin nh·∫Øn trong channel {channel_id} : {e}")
            return False